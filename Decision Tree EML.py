# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n79xSC2FQLoLqdliM_Zs_vayWp6h9tea
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split # For evaluation
from sklearn.metrics import accuracy_score
np.random.seed(0)
from sklearn import datasets
from sklearn import tree
from sklearn.ensemble import BaggingClassifier

X,y = datasets.load_iris(return_X_y=True)
print('Number of training examples : ',X.shape[0])
print('Number of predictors : ',y.shape[1] if len(y.shape)>1 else 1)

X_train ,X_test , y_train,y_test = train_test_split(X,y,test_size=0.2)
dt = DecisionTreeClassifier(max_depth=5,criterion='entropy')
dt.fit(X_train,y_train)
y_pred = dt.predict(X_test)
print('\nAccuracy Score: {:2.4f}'.format(accuracy_score(y_test,y_pred)))
if X.shape[1]<2:
  plt.figure()
  plt.scatter(X_train,y_train,color='red')
  plt.scatter(X_test,y_pred,color='blue',linewidth=3)
  plt.show()

print('Tree Depth: ',dt.get_depth())

plt.figure(figsize=(5,5),dpi=150)
tree.plot_tree(dt,filled=True)

X_train ,X_test , y_train,y_test = train_test_split(X,y,test_size=0.2)
bc = BaggingClassifier(base_estimator=DecisionTreeClassifier(), n_estimators=1)
bc.fit(X_train,y_train)
y_pred=bc.predict(X_test)
print('\n Bagging Accuracy Score: {:2.4f}'.format(accuracy_score(y_test,y_pred)))

